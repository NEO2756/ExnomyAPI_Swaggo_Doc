// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-11-19 17:52:02.868508 +0530 IST m=+0.062772323

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://www.exnomy.com/terms-and-privacy",
        "contact": {
            "name": "Exnomy Support",
            "url": "https://www.exnomy.com/terms-and-privacy",
            "email": "info@dexhigh.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://github.com/blockbankcoltd/Exnomy/blob/master/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/markets": {
            "get": {
                "description": "Find published markets from db and attach last 24hr market status for each market.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Show all Published markets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Market"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/markets/{marketID}/candles": {
            "get": {
                "description": "Get high, low, open, close and volume data for an interval defined bt from to to param.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Bar data from 'from' to 'to'.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Market ID, ex XRP-BTC",
                        "name": "marketID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "from",
                        "name": "from",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "to",
                        "name": "to",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "granularity",
                        "name": "granularity",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Bar"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/markets/{marketID}/orderbook": {
            "get": {
                "description": "Find the latest snapshot version 2 corresponding to MarketID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get OrderBook for a particular market ID.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MarketID (ex: XRP-BTC)",
                        "name": "marketID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.SnapshotV2"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/markets/{marketID}/trades": {
            "get": {
                "description": "Find all the trades for a particular market",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Show all trades for a market",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MarketID (ex XRP-BTC)",
                        "name": "marketID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.QueryTradeResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "description": "Find latest 'N' speacified orders, 20 if 'N' is not speacifies corresponding to particular MarketID and user address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Show orders, reverse-chrono order.",
                "parameters": [
                    {
                        "description": "registered user address",
                        "name": "user_address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "type": "string",
                        "description": "MarketID",
                        "name": "market_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.QueryOrderResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/orders/{orderID}": {
            "get": {
                "description": "Get order corresponding to a particular order ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Single order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OrderID",
                        "name": "orderID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.QuerySingleOrderResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.ApiError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "desc": {
                    "type": "string"
                }
            }
        },
        "api.Bar": {
            "type": "object",
            "properties": {
                "close": {
                    "type": "number"
                },
                "high": {
                    "type": "number"
                },
                "low": {
                    "type": "number"
                },
                "open": {
                    "type": "number"
                },
                "time": {
                    "type": "integer"
                },
                "volume": {
                    "type": "number"
                }
            }
        },
        "api.Market": {
            "type": "object",
            "properties": {
                "amount24h": {
                    "type": "number"
                },
                "amountDecimals": {
                    "type": "integer"
                },
                "asMakerFeeRate": {
                    "type": "number"
                },
                "asTakerFeeRate": {
                    "type": "number"
                },
                "baseToken": {
                    "type": "string"
                },
                "baseTokenAddress": {
                    "type": "string"
                },
                "baseTokenDecimals": {
                    "type": "integer"
                },
                "baseTokenName": {
                    "type": "string"
                },
                "baseTokenProjectUrl": {
                    "type": "string"
                },
                "gasFeeAmount": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "lastPrice": {
                    "type": "number"
                },
                "lastPriceIncrease": {
                    "type": "number"
                },
                "marketOrderMaxSlippage": {
                    "type": "number"
                },
                "minOrderSize": {
                    "type": "number"
                },
                "price24h": {
                    "type": "number"
                },
                "priceDecimals": {
                    "type": "integer"
                },
                "pricePrecision": {
                    "type": "integer"
                },
                "quoteToken": {
                    "type": "string"
                },
                "quoteTokenAddress": {
                    "type": "string"
                },
                "quoteTokenDecimals": {
                    "type": "integer"
                },
                "quoteTokenVolume24h": {
                    "type": "number"
                },
                "supportedOrderTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "api.QueryOrderResp": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "orders": {
                    "type": "string"
                }
            }
        },
        "api.QuerySingleOrderResp": {
            "type": "object",
            "properties": {
                "order": {
                    "type": "string"
                }
            }
        },
        "api.QueryTradeResp": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "trades": {
                    "type": "string"
                }
            }
        },
        "api.SnapshotV2": {
            "type": "object",
            "properties": {
                "asks": {
                    "type": "array",
                    "items": {
                        "type": "\u0026{%!s(token.Pos=365) %!s(*ast.BasicLit=\u0026{366 5 2}) string}"
                    }
                },
                "bids": {
                    "type": "array",
                    "items": {
                        "type": "\u0026{%!s(token.Pos=329) %!s(*ast.BasicLit=\u0026{330 5 2}) string}"
                    }
                },
                "sequence": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "ExnomyAuthToken": {
            "type": "apiKey",
            "name": "Authorization (DEX-EXONOMY-AUTH should be like {address}#DEX-EXONOMY-AUTH@{time}#{signature})",
            "in": "header"
        }
    },
    "x-extension-openapi": {
        "example": "value on a json format"
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "api.exnomy.com",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Exnomy API Swagger Documentation",
	Description: "This is Exnomy API Server.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
